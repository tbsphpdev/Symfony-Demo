<?php

namespace Chartwell\Modules\ClientAndSiteManagementBundle\Entity;

use Doctrine\ORM\EntityRepository;

use Chartwell\CoreBundle\Toolkit\Lists;


/**
 * ContractRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ContractRepository extends EntityRepository
{

    use \Chartwell\CoreBundle\Entity\traits\SoftDeleteable\RepositoryTrait;

    public function getPage($page = 1, $perPage = null, $filter = null)
    {

        $qb = $this->createQueryBuilder('c')
            ->select('c')
            ->leftJoin('c.siteId', 's');

        $orderByColumn = isset($filter['column']) ? $filter['column'] : 'contractNumber';
        $orderByDirection =
            isset($filter['order']) && in_array($filter['order'], array('asc', 'desc'))
                ? $filter['order']
                : 'desc';

        if($orderByColumn !== 'total') {
            if (!$this->getClassMetadata()->hasField($orderByColumn)) {
                $orderByColumn = 'id';
            }
        }
        $this->addSoftDeleteClause($qb, 'c');

        if (!empty($filter['search'])) {
            $qb->andWhere('(
               s.siteName LIKE :search
            )');
            $qb->setParameter(':search', '%' . $filter['search'] . '%');
        }

        if (!empty($filter['strict']) && is_array($filter['strict'])) {

            $strictColumns = array(
                'client' => 'c.id'
            );

            foreach ($strictColumns as $columnName => $columnDB) {
                if (!empty($filter['strict'][$columnName])) {
                    $qb->andWhere("
                        {$columnDB} = :strict_{$columnName}
                    ");
                    $qb->setParameter(":strict_{$columnName}", $filter['strict'][$columnName]);
                }
            }
        }
        if(!empty($filter['strict']['contractSites'])){

            $siteIds = implode(',',$filter['strict']['contractSites']);
            $qb->andWhere($qb->expr()->in('c.siteId', $siteIds));

        }
        if (!empty($filter['strict']['contact'])) {
            $qb->andWhere(':contactId MEMBER OF s.contacts');
            $qb->setParameter(':contactId', $filter['strict']['contact']);
        }

        if(!empty($filter['strict']['site'])) {

            $qb->andWhere('c.siteId = :siteId');
            $qb->setParameter(':siteId', $filter['strict']['site']);
        }
        //echo $qb->getQuery()->getSQL(); exit;
        if($orderByColumn === 'total') {
            $qb->orderBy($orderByColumn, $orderByDirection);
        } else {
            $qb->orderBy('c.' . $orderByColumn, $orderByDirection);
        }
        //echo $qb->getQuery()->getSQL(); exit;
        return Lists::paginate($qb->getQuery(), $page, $perPage);
    }

    public function updateClientContract($site, $client){
        return $this->createQueryBuilder('c')
                ->update()
                ->set('c.client',':client')
                ->setParameter(':client', $client)
                ->where('c.siteId = :siteId')
                ->setParameter(':siteId', $site)
                ->getQuery()
                ->getResult();
    }

    public function getTotalValueOfSites(){
        $result = $this->createQueryBuilder('co')
            ->leftJoin('co.client', 'c')
            ->select(array('total' => 'SUM(co.contractValue)'))
            ->where('co.isDeleted = 0')
            ->andWhere('c.isDeleted = 0')
            ->getQuery()
            ->getArrayResult();

        return $result[0][1];
    }

    public function getSitesContracts() {

        $result = $this->createQueryBuilder('co')
            ->leftJoin('co.siteId', 's')
            ->select('co.contractEndDate, s.id')
            ->where('co.isDeleted = 0')
            ->getQuery()
            ->getArrayResult();
        for($i = 0; $i < count($result); $i++) {

            $now = new \DateTime();
            if(!is_null($result[$i]['contractEndDate'])){
                $contractEndDate = new \DateTime($result[$i]['contractEndDate']->format('Y-m-d H:i:s'));
                $diff = $now->diff( $contractEndDate, false);
                $result[$i]['contractEndDate'] = (int)$diff->format('%r%a');
            }
            else{
                $result[$i] = 0;
            }
        }
        return $result;

    }

}
